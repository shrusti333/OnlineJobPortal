// Generated by view binder compiler. Do not edit!
package com.example.usersidelab.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.usersidelab.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class HomeitemlayoutBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView itemcompanyname;

  @NonNull
  public final TextView itemjobname;

  @NonNull
  public final TextView itemplace;

  @NonNull
  public final TextView itemsalary;

  @NonNull
  public final TextView itemshift;

  @NonNull
  public final TextView itemtype;

  @NonNull
  public final LinearLayout userviewjob;

  private HomeitemlayoutBinding(@NonNull CardView rootView, @NonNull TextView itemcompanyname,
      @NonNull TextView itemjobname, @NonNull TextView itemplace, @NonNull TextView itemsalary,
      @NonNull TextView itemshift, @NonNull TextView itemtype, @NonNull LinearLayout userviewjob) {
    this.rootView = rootView;
    this.itemcompanyname = itemcompanyname;
    this.itemjobname = itemjobname;
    this.itemplace = itemplace;
    this.itemsalary = itemsalary;
    this.itemshift = itemshift;
    this.itemtype = itemtype;
    this.userviewjob = userviewjob;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static HomeitemlayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HomeitemlayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.homeitemlayout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HomeitemlayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.itemcompanyname;
      TextView itemcompanyname = ViewBindings.findChildViewById(rootView, id);
      if (itemcompanyname == null) {
        break missingId;
      }

      id = R.id.itemjobname;
      TextView itemjobname = ViewBindings.findChildViewById(rootView, id);
      if (itemjobname == null) {
        break missingId;
      }

      id = R.id.itemplace;
      TextView itemplace = ViewBindings.findChildViewById(rootView, id);
      if (itemplace == null) {
        break missingId;
      }

      id = R.id.itemsalary;
      TextView itemsalary = ViewBindings.findChildViewById(rootView, id);
      if (itemsalary == null) {
        break missingId;
      }

      id = R.id.itemshift;
      TextView itemshift = ViewBindings.findChildViewById(rootView, id);
      if (itemshift == null) {
        break missingId;
      }

      id = R.id.itemtype;
      TextView itemtype = ViewBindings.findChildViewById(rootView, id);
      if (itemtype == null) {
        break missingId;
      }

      id = R.id.userviewjob;
      LinearLayout userviewjob = ViewBindings.findChildViewById(rootView, id);
      if (userviewjob == null) {
        break missingId;
      }

      return new HomeitemlayoutBinding((CardView) rootView, itemcompanyname, itemjobname, itemplace,
          itemsalary, itemshift, itemtype, userviewjob);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
